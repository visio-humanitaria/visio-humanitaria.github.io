{"version":3,"sources":["../node_modules/node-nlp-rn/lib/sentiment sync","serviceWorker.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","a","localStorage","getItem","setItem","JSON","stringify","chatbox","update","body","formattedChat","parse","data","map","d","answer","join","ui","ostentus","target","intro_text","header","text","option","label","form","style","maxHeight","overflow","overflowX","chat","input","name","type","submit","nlp","findScripture","utterance","message","chat_data","unshift","initialize","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.2b596dbe.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 234;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (response.status === 404 || (contentType != null && contentType.indexOf(\"javascript\") === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\"No internet connection found. App is running in offline mode.\");\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import \"react-app-polyfill/stable\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport nlp from \"bontaki-engine\";\nimport ostentus from \"ostentus\";\n\n// compile model to local storage\nasync function initialize() {\n\t// if not exists, create chatbox data array\n\tif(localStorage.getItem(\"bontaki_chat_data\") === null) {\n\t\tlocalStorage.setItem(\"bontaki_chat_data\", JSON.stringify([]));\n\t}\n\telse {\n\t\tchatbox.update({ body: formattedChat(JSON.parse(localStorage.getItem(\"bontaki_chat_data\"))) });\n\t}\n}\n\nfunction formattedChat(data) {\n\treturn data.map((d) => {\n\t\treturn `\n${d.answer}\n`;\n\t}).join(\"\");\n}\n\n// create user interface\nconst ui = ostentus({ target: \"root\" });\n\nconst intro_text = `\n### Speak to biblical texts as a friend.\n\nBontaki uses natural language processing to read your emotional state and reply within scriptural context.\n`;\n\nconst why_bible = `\n### How did religion come about?\n\nReligion exists because it was \"selected\" for by our ancestors. That's correct, religion\nis a psychological construct and a social paradigm orchestrated by 13.8 billion years \nof evolution. The question as to of why anything exists can be easily applied to the \nanswer of selective reproduction and much of our behavior is driven by our genetics.\n\n### Why study scriptures?\n\nAs long as humanity could talk to one another, stories have always been told. These \nnarratives have always shared common themes and patterns relating to the human condition.\nThe stories that were most successful and shared for generations were closely tied to the \ncollective aims of humanity, hence we have holy narratives and ideas. While rather arbitrary \nthe judeo/christian bible is an archive of collective human thought with humanitarian aim.\n\n### What's the purpose of Bontaki?\n\nBontaki is an ongoing experiment to connect human emotional states to collective humanitarian \ncognition echoed in biblical context. It had come to my awareness that much of the bible is a \nseries of psychoanalytic metaphors which when applied correctly generate psychoanalysis for the \nparticipants.\n`;\n\nconst header = ui.text({ body: intro_text });\n\nheader.option({ label: \"Why the bible?\" }, () => {\n\theader.update({ body: why_bible });\n});\n\nheader.option({ label: \"Type 'reset' to RESET...\" }, async () => {\n\theader.update({ body: \"\" });\n\tconst update = await header.form();\n\tif(update.body === \"reset\") {\n\t\tlocalStorage.setItem(\"bontaki_chat_data\", JSON.stringify([]));\n\t\tchatbox.update({ body: \"\" });\n\t}\n\theader.update({ body: intro_text });\n});\n\nheader.option({ label: \"Cancel\" }, () => {\n\theader.update({ body: intro_text });\n})\n\nconst chatbox = ui.text({ body: `` });\n\nchatbox.style({ maxHeight: \"200px\", overflow: \"auto\", overflowX: \"hidden\" });\n\nconst chat = ui.form();\n\nchat.input({ name: \"message\", type: \"textarea\" });\nchat.submit(async (data) => {\n\tconst chat_data = await nlp().findScripture({ utterance: data.message });\n\tconst update = JSON.parse(localStorage.getItem(\"bontaki_chat_data\"));\n\tupdate.unshift({ ...chat_data, utterance: data.message });\n\tlocalStorage.setItem(\"bontaki_chat_data\", JSON.stringify(update));\n\tchatbox.update({ body: formattedChat(update) });\n});\n\ninitialize();\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}